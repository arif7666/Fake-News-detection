{"cells":[{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"elapsed":1797,"status":"ok","timestamp":1686931411209,"user":{"displayName":"Hasimah Talib","userId":"02466284333923128497"},"user_tz":-480},"id":"bCW9y3OkxYgv","outputId":"84b49cf8-d440-43f2-c75b-3cf054df22e9"},"outputs":[{"output_type":"stream","name":"stdout","text":["https://su1hqzekj2q-496ff2e9c6d22116-5000-colab.googleusercontent.com/\n"]}],"source":["from google.colab.output import eval_js\n","print(eval_js(\"google.colab.kernel.proxyPort(5000)\"))"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3310,"status":"ok","timestamp":1686931417258,"user":{"displayName":"Hasimah Talib","userId":"02466284333923128497"},"user_tz":-480},"id":"8NXutgLVj768","outputId":"b0e330a6-7a74-4bad-f6e6-e31de3e5dd89"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["# link google drive to colab notebook\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"O0iVwXRPDFJJ","executionInfo":{"status":"ok","timestamp":1686931419815,"user_tz":-480,"elapsed":598,"user":{"displayName":"Hasimah Talib","userId":"02466284333923128497"}}},"outputs":[],"source":["import os\n","# change directory to the fmy-flask-app folder\n","os.chdir('/content/drive/MyDrive/my-flask-app')"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":374,"status":"ok","timestamp":1686931423437,"user":{"displayName":"Hasimah Talib","userId":"02466284333923128497"},"user_tz":-480},"id":"sDTG02giam9j","outputId":"57a447a8-62d6-4ead-ee45-0dbc68a7f280"},"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Package wordnet is already up-to-date!\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":10}],"source":["#Import required packages\n","import pickle\n","import numpy as np\n","import nltk\n","import re\n","from flask import Flask, render_template, request\n","from nltk.corpus import stopwords\n","from nltk.stem.porter import PorterStemmer\n","from nltk.stem import WordNetLemmatizer\n","wordnet=WordNetLemmatizer()\n","nltk.download('wordnet')\n","nltk.download('stopwords')\n","nltk.download('punkt')"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"JxSZaQMjjBEO","executionInfo":{"status":"ok","timestamp":1686931427250,"user_tz":-480,"elapsed":342,"user":{"displayName":"Hasimah Talib","userId":"02466284333923128497"}}},"outputs":[],"source":["app = Flask(__name__, template_folder='/content/drive/MyDrive/my-flask-app/templates')"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U84Ppw3cOpYB","outputId":"7a8c6110-04e8-42eb-cb49-64138b4884bb","executionInfo":{"status":"ok","timestamp":1686932336365,"user_tz":-480,"elapsed":3804,"user":{"displayName":"Hasimah Talib","userId":"02466284333923128497"}}},"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":[" * Serving Flask app '__main__'\n"," * Debug mode: off\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["INFO:werkzeug:\u001b[31m\u001b[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\u001b[0m\n"," * Running on http://127.0.0.1:5000\n","INFO:werkzeug:\u001b[33mPress CTRL+C to quit\u001b[0m\n","INFO:werkzeug:127.0.0.1 - - [16/Jun/2023 16:03:54] \"GET / HTTP/1.1\" 200 -\n","INFO:werkzeug:127.0.0.1 - - [16/Jun/2023 16:03:55] \"\u001b[33mGET /favicon.ico HTTP/1.1\u001b[0m\" 404 -\n","INFO:werkzeug:127.0.0.1 - - [16/Jun/2023 16:04:09] \"POST / HTTP/1.1\" 200 -\n","INFO:werkzeug:127.0.0.1 - - [16/Jun/2023 16:04:10] \"\u001b[33mGET /favicon.ico HTTP/1.1\u001b[0m\" 404 -\n","INFO:werkzeug:127.0.0.1 - - [16/Jun/2023 16:07:16] \"POST / HTTP/1.1\" 200 -\n","INFO:werkzeug:127.0.0.1 - - [16/Jun/2023 16:07:16] \"\u001b[33mGET /favicon.ico HTTP/1.1\u001b[0m\" 404 -\n"]}],"source":["# Load the saved model\n","with open('modelsvm.pkl', 'rb') as file:\n","    SVM = pickle.load(file)\n","\n","with open('vectorization.pkl', 'rb') as file:\n","    vectorization = pickle.load(file)\n","\n","from scipy.special import expit\n","\n","# Define a route for the home page\n","@app.route('/', methods=['GET', 'POST'])\n","def check_news():\n","    if request.method == 'POST':\n","        # Get the input news text from the form\n","        news = request.form['news']\n","\n","        # Preprocess the input news text\n","        review = re.sub('[^a-zA-Z]', ' ', news)\n","        review = review.lower()\n","        review = review.split()\n","        review = [wordnet.lemmatize(word) for word in review if not word in set(stopwords.words('english'))]\n","        review = ' '.join(review)\n","\n","        # Vectorize the preprocessed news text\n","        news_vectorized = vectorization.transform([review])\n","\n","        # Make the prediction\n","            decision_scores = SVM.decision_function(news_vectorized)\n","        probabilities = expit(decision_scores)\n","\n","        if probabilities > 0.5:\n","            prediction = \"Real news (Probability: {:.2f})\".format(probabilities[0])\n","        else:\n","            prediction = \"Fake news (Probability: {:.2f})\".format(1 - probabilities[0])\n","\n","        # Return the prediction as a response\n","        return render_template('check.html', prediction=prediction)\n","\n","    # If the request method is GET, just display the input form\n","    return render_template('check.html')\n","\n","if __name__ == '__main__':\n","    app.run()\n"]}],"metadata":{"colab":{"provenance":[{"file_id":"1eYT6OcwWrVezUlr6Dn1CS-6Y6WXfWfKk","timestamp":1686900876111},{"file_id":"1WJ9B5UyMoQn3y5bGP6MGGROvxkZjCNmz","timestamp":1685958627765},{"file_id":"1OfeeUa9IyKj_nMsDXMcA5v6uxd8plDWz","timestamp":1684387784325},{"file_id":"1BXfp0aSg9P80s3OUxCzuiEe7CuGR6mHc","timestamp":1683525597546},{"file_id":"1uXGtblFoGZaaCABBkOk0XDtKTFBn9JnD","timestamp":1683522834096},{"file_id":"1qT3rNYoWH2iKHL9RO1ywpkz_R4HNtEHR","timestamp":1683468364262},{"file_id":"1bRui-ji-CT1QtPywp9J2-5TTDQhYtdhE","timestamp":1683452855551},{"file_id":"1xGsw5rW2LOKi_YIHinnGxFC-KV5OqZ5M","timestamp":1683450646395},{"file_id":"1TJ4Tdh-vEjMVwASXEeBJG2rIx70PU3UG","timestamp":1683440571187},{"file_id":"1f9kAVm1r9Xhgzp24YYm6q1IZFAOjSoJY","timestamp":1683433951574},{"file_id":"1SwYvgpk9DuHLDiQYBH8xfJd7ylqSlMKJ","timestamp":1683421681784}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}